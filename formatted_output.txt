I am working on a simple and quick AI chat web app. Here is the full project:

index.html
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gemini Chat</title>
    <link rel="stylesheet" href="style.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
</head>
<body>
    <div id="api-key-modal" class="modal">
        <div class="modal-content">
            <h2>Welcome to Gemini Chat</h2>
            <p>Please enter your Google Gemini API key to continue:</p>
            <input type="password" id="api-key-input" placeholder="Enter your API key">
            <button id="save-api-key">Start Chatting</button>
        </div>
    </div>

    <div class="chat-container">
        <header>
            <h1>Gemini Chat</h1>
            <button id="clear-key" class="clear-key-btn">Clear API Key</button>
        </header>
        
        <div id="chat-history"></div>
    </div>

    <div id="attachment-previews" class="attachment-previews"></div>

    <div class="input-container">
        <form id="chat-form">
            <!-- Attachment Icon -->
            <label for="file-input" class="attachment-icon">ðŸ“Ž</label>
            <input type="file" id="file-input" multiple style="display: none;">
            <input type="text" id="message-input" placeholder="Type your message..." autocomplete="off">
            <button type="submit">Send</button>
        </form>
    </div>

    <!-- Drag and Drop Area -->
    <div id="drop-area" class="drop-area">Drop files here</div>

    <script type="module" src="script.js"></script>
</body>
</html>
```

script.js
```javascript
import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "https://esm.run/@google/generative-ai";
import { marked } from "https://esm.run/marked";

const API_KEY_STORAGE_KEY = 'gemini-api-key';
let chat;
let attachedFiles = [];

// DOM Elements
const apiKeyModal = document.getElementById('api-key-modal');
const apiKeyInput = document.getElementById('api-key-input');
const saveApiKeyBtn = document.getElementById('save-api-key');
const clearKeyBtn = document.getElementById('clear-key');
const chatForm = document.getElementById('chat-form');
const messageInput = document.getElementById('message-input');
const chatHistory = document.getElementById('chat-history');
const fileInput = document.getElementById('file-input');
const attachmentPreviews = document.getElementById('attachment-previews');
const dropArea = document.getElementById('drop-area');

// Check for existing API key
function checkApiKey() {
    const savedApiKey = localStorage.getItem(API_KEY_STORAGE_KEY);
    if (!savedApiKey) {
        apiKeyModal.style.display = 'flex';
        return false;
    }
    return true;
}

// Initialize Gemini Chat
async function initializeChat() {
    const apiKey = localStorage.getItem(API_KEY_STORAGE_KEY);
    const genAI = new GoogleGenerativeAI(apiKey);
    const safetySettings = [
        {
            category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
            threshold: HarmBlockThreshold.BLOCK_NONE,
        },
        {
            category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
            threshold: HarmBlockThreshold.BLOCK_NONE,
        },
        {
            category: HarmCategory.HARM_CATEGORY_HARASSMENT,
            threshold: HarmBlockThreshold.BLOCK_NONE,
        },
        {
            category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
            threshold: HarmBlockThreshold.BLOCK_NONE,
        }
    ];
    const model = genAI.getGenerativeModel({
        model: "gemini-1.5-flash",
        generationConfig: {
            temperature: 0.2,
        },
        // safetySettings: safetySettings,
    });

    chat = model.startChat();
}

// Event Listeners
saveApiKeyBtn.addEventListener('click', () => {
    const apiKey = apiKeyInput.value.trim();
    if (apiKey) {
        localStorage.setItem(API_KEY_STORAGE_KEY, apiKey);
        apiKeyModal.style.display = 'none';
        initializeChat();
    }
});

clearKeyBtn.addEventListener('click', () => {
    localStorage.removeItem(API_KEY_STORAGE_KEY);
    chat = null;
    chatHistory.innerHTML = '';
    apiKeyModal.style.display = 'flex';
});

chatForm.addEventListener('submit', async (e) => {
    e.preventDefault();

    if (!checkApiKey()) return;
    if (!chat) await initializeChat();

    const message = messageInput.value.trim();
    if (!message && attachedFiles.length === 0) return;

    // Add user message to chat
    addMessageToChat('user', message);
    messageInput.value = '';

    try {
        // Process attached files
        const fileParts = await processAttachedFiles();

        // Prepare the message parts
        const messageParts = [];
        if (message) messageParts.push({ text: message });
        messageParts.push(...fileParts);

        // Add assistant message placeholder
        const assistantMessageEl = addMessageToChat('assistant', '');

        // Send the message with attached files
        const result = await chat.sendMessageStream(messageParts);
        let fullResponse = '';

        for await (const chunk of result.stream) {
            const chunkText = chunk.text();
            fullResponse += chunkText;
            assistantMessageEl.innerHTML = marked.parse(fullResponse);
            scrollToBottom();
        }
    } catch (error) {
        console.error(error);
        addMessageToChat('error', 'An error occurred. Please try again.');
    } finally {
        // Clear attachments after sending
        attachedFiles = [];
        attachmentPreviews.innerHTML = '';
    }
});

// Helper Functions
function addMessageToChat(role, content) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${role}-message`;
    
    const iconDiv = document.createElement('div');
    iconDiv.className = 'message-icon';
    iconDiv.textContent = role === 'user' ? 'ðŸ‘¤' : 'ðŸ¤–';
    
    const contentDiv = document.createElement('div');
    contentDiv.className = 'message-content';
    contentDiv.innerHTML = role === 'error' ? content : marked.parse(content);
    
    messageDiv.appendChild(iconDiv);
    messageDiv.appendChild(contentDiv);
    chatHistory.appendChild(messageDiv);
    scrollToBottom();
    
    return contentDiv;
}

function scrollToBottom() {
    chatHistory.scrollTop = chatHistory.scrollHeight;
}

// Initialize
checkApiKey();
if (localStorage.getItem(API_KEY_STORAGE_KEY)) {
    initializeChat();
}

fileInput.addEventListener('change', (e) => {
    handleFiles(e.target.files);
});

// Handle drag and drop
['dragenter', 'dragover'].forEach(eventName => {
    document.addEventListener(eventName, (e) => {
        e.preventDefault();
        dropArea.style.display = 'block';
    });
});

['dragleave', 'drop'].forEach(eventName => {
    document.addEventListener(eventName, (e) => {
        e.preventDefault();
        dropArea.style.display = 'none';
    });
});

dropArea.addEventListener('drop', (e) => {
    e.preventDefault();
    handleFiles(e.dataTransfer.files);
});

// Handle attached files
function handleFiles(files) {
    for (let file of files) {
        attachedFiles.push(file);
        displayAttachmentPreview(file);
    }
}

// Display attachment previews
function displayAttachmentPreview(file) {
    const previewDiv = document.createElement('div');
    previewDiv.className = 'attachment-preview';

    const removeBtn = document.createElement('button');
    removeBtn.className = 'remove-attachment';
    removeBtn.textContent = 'Ã—';
    removeBtn.addEventListener('click', () => {
        attachedFiles = attachedFiles.filter(f => f !== file);
        attachmentPreviews.removeChild(previewDiv);
    });

    let previewContent;
    if (file.type.startsWith('image/')) {
        previewContent = document.createElement('img');
        previewContent.src = URL.createObjectURL(file);
    } else {
        previewContent = document.createElement('div');
        previewContent.textContent = file.name;
    }

    previewDiv.appendChild(previewContent);
    previewDiv.appendChild(removeBtn);
    attachmentPreviews.appendChild(previewDiv);
}

async function processAttachedFiles() {
    const fileParts = [];
    for (let file of attachedFiles) {
        const fileUri = await uploadFile(file);
        fileParts.push({
            file_data: {
                mime_type: file.type,
                file_uri: fileUri
            }
        });
    }
    return fileParts;
}

// Upload file to File API
async function uploadFile(file) {
    const apiKey = localStorage.getItem(API_KEY_STORAGE_KEY);
    const uploadUrl = `https://generativelanguage.googleapis.com/upload/v1beta/files?key=${apiKey}`;

    // Start resumable upload
    const startUploadResponse = await fetch(uploadUrl, {
        method: 'POST',
        headers: {
            'X-Goog-Upload-Protocol': 'resumable',
            'X-Goog-Upload-Command': 'start',
            'X-Goog-Upload-Header-Content-Length': file.size,
            'X-Goog-Upload-Header-Content-Type': file.type,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            file: { display_name: file.name }
        })
    });

    if (!startUploadResponse.ok) {
        throw new Error('Failed to initiate file upload.');
    }

    const uploadUrlFromHeader = startUploadResponse.headers.get('X-Goog-Upload-URL');

    // Upload the file data
    const uploadResponse = await fetch(uploadUrlFromHeader, {
        method: 'POST',
        headers: {
            'Content-Length': file.size,
            'X-Goog-Upload-Offset': '0',
            'X-Goog-Upload-Command': 'upload, finalize'
        },
        body: file
    });

    if (!uploadResponse.ok) {
        throw new Error('Failed to upload file data.');
    }

    const fileInfo = await uploadResponse.json();
    const fileUri = fileInfo.file.uri;
    const fileName = fileInfo.file.name;
    let fileState = fileInfo.file.state;

    // Ensure the file state is ACTIVE
    while (fileState === 'PROCESSING') {
        // Optionally, you can display a message to the user about processing
        console.log(`Processing file ${file.name}, please wait...`);
        await new Promise(resolve => setTimeout(resolve, 3000)); // Wait 3 seconds

        // Fetch the file info again
        const fileStatusResponse = await fetch(`https://generativelanguage.googleapis.com/v1beta/files/${fileName}?key=${apiKey}`);

        if (!fileStatusResponse.ok) {
            throw new Error('Failed to fetch file status.');
        }

        const fileStatusInfo = await fileStatusResponse.json();
        fileState = fileStatusInfo.file.state;
    }

    if (fileState !== 'ACTIVE') {
        throw new Error(`File ${file.name} is not active.`);
    }

    // Return the file URI to be used in the message parts
    return fileUri;
}
```

server.js
```javascript
// import fs from "fs";
// import http from "http";
// import path from "path";
// import url from "url";
const fs = require("fs");
const http = require("http");
const path = require("path");
const url = require("url");

const PORT = 8000;

const mimeType = {
  ".html": "text/html",
  ".js": "text/javascript",
  ".mjs": "text/javascript",
  ".css": "text/css",
};

http
  .createServer((req, res) => {
    console.log(`  ${req.method} ${req.url}`);

    const parsedUrl = url.parse(req.url);
    let sanitizedPath = path
      .normalize(parsedUrl.pathname)
      .replace(/^(\.\.[\/\\])+/, "")
      .substring(1);

    if (sanitizedPath === "") {
      sanitizedPath = "index.html";
    }

    const ext = path.parse(sanitizedPath).ext;

    try {
      const data = fs.readFileSync(sanitizedPath);
      if (mimeType[ext]) {
        res.setHeader("Content-Type", mimeType[ext]);
      }
      res.end(data);
    } catch (err) {
      res.statusCode = 404;
      res.end();
    }
  })
  .listen(parseInt(PORT));

console.log(`Server listening on http://localhost:${PORT}`);
```

style.css
```css
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Inter', sans-serif;
    line-height: 1.6;
    background-color: #f5f5f5;
}

.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background-color: white;
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    max-width: 400px;
    width: 90%;
}

.modal-content h2 {
    margin-bottom: 1rem;
    color: #333;
}

.modal-content input {
    width: 100%;
    padding: 0.75rem;
    margin: 1rem 0;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 1rem;
}

.chat-container {
    max-width: 900px;
    margin: 0 auto;
    height: 100vh;
    display: flex;
    flex-direction: column;
    background-color: white;
}

header {
    padding: 1rem 2rem;
    background-color: #f8f9fa;
    border-bottom: 1px solid #dee2e6;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

header h1 {
    font-size: 1.5rem;
    color: #333;
}

.clear-key-btn {
    background-color: #dc3545;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.875rem;
}

.clear-key-btn:hover {
    background-color: #c82333;
}

#chat-history {
    flex-grow: 1;
    overflow-y: auto;
    padding: 1rem;
}

.message {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
    padding: 0.5rem;
    border-radius: 8px;
}

.user-message {
    background-color: #f8f9fa;
}

.assistant-message {
    background-color: #e9ecef;
}

.error-message {
    background-color: #fff3f3;
    color: #dc3545;
}

.message-icon {
    font-size: 1.5rem;
    width: 2.5rem;
    height: 2.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: white;
    border-radius: 50%;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.message-content {
    flex-grow: 1;
    padding: 0.5rem;
}

.message-content p {
    margin-bottom: 0.5rem;
}

.message-content code {
    background-color: #f8f9fa;
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    font-family: monospace;
}

.input-container {
    display: flex;
    align-items: center;
    padding: 1rem;
    border-top: 1px solid #dee2e6;
}


#chat-form {
    display: flex;
    gap: 0.5rem;
}

#message-input {
    flex-grow: 1;
    padding: 0.75rem;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    font-size: 1rem;
    margin-left: 0.5rem;
}

button {
    padding: 0.75rem 1.5rem;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.2s;
}

button:hover {
    background-color: #0056b3;
}

button:disabled {
    background-color: #cccccc;
    cursor: not-allowed;
}

@media (max-width: 600px) {
    .chat-container {
        height: 100vh;
    }
    
    header {
        padding: 0.75rem;
    }
    
    .input-container {
        padding: 0.75rem;
    }
}

/* Attachment Icon */
.attachment-icon {
    font-size: 1.5rem;
    cursor: pointer;
    margin-right: 0.5rem;
    display: flex;
    align-items: center;
}

/* Attachment Previews */
.attachment-previews {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-top: 1px solid #dee2e6;
    background-color: #f8f9fa;
}

.attachment-preview {
    position: relative;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    padding: 0.5rem;
    background-color: white;
    display: flex;
    align-items: center;
}

.attachment-preview img {
    max-width: 100px;
    max-height: 100px;
    border-radius: 4px;
}

.attachment-preview div {
    max-width: 100px;
    word-wrap: break-word;
}

.remove-attachment {
    position: absolute;
    top: 2px;
    right: 2px;
    background: transparent;
    border: none;
    color: #dc3545;
    font-size: 1rem;
    cursor: pointer;
}

/* Drag and Drop Area */
.drop-area {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    color: white;
    font-size: 2rem;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}


```

This all works great, but I want to make some heavy changes. I want to fully redesign the UI and how the interface works. I want you to fully develop and implement this. I want it to use a dark theme, and to be as minimilistic as possible. Redesign all the elements and componenets, how they act and react, how they look and feel.