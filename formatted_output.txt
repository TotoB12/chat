I am working on a simple and quick AI chat web app. Here is the full project:

public\index.html
```html
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TotoB12 Chat</title>
    <link rel="stylesheet" href="style.css">
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;500;600&display=swap" rel="stylesheet">
</head>

<body>
    <div id="api-key-modal" class="modal">
        <div class="modal-content">
            <h2>Welcome</h2>
            <p>Enter your Google Gemini API key:</p>
            <!-- get it here: https://aistudio.google.com/app -->
            <p>Get it here: <a href="https://aistudio.google.com/app" target="_blank">https://aistudio.google.com/app</a></p>
            <div class="input-wrapper">
                <input type="password" id="api-key-input" placeholder=" ">
                <label for="api-key-input">API Key</label>
            </div>
            <button id="save-api-key">Continue</button>
        </div>
    </div>

    <header class="header">
        <!-- <h1>TotoB12</h1> -->
        <button id="clear-key" class="icon-button" title="Clear API Key">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" />
            </svg>
        </button>
    </header>

    <div class="chat-container">
        <div id="chat-history"></div>
    </div>

    <div class="toolbar">
        <button id="new-chat" class="icon-button" title="New Chat">
            <img src="temp.png" alt="Temporary Image" style="height: 24px; width:24px">
        </button>

        <button for="file-input" class="icon-button" id="upload-button" title="Attach files">
            <svg fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path
                    d="M11.7498 3C12.1295 3 12.4434 3.28201 12.4931 3.64808L12.5 3.74985L12.5012 11H19.7543C20.1685 11 20.5043 11.3358 20.5043 11.75C20.5043 12.1297 20.2221 12.4435 19.8561 12.4932L19.7543 12.5H12.5012L12.5032 19.7491C12.5033 20.1633 12.1676 20.4993 11.7534 20.4993C11.3737 20.4993 11.0598 20.2173 11.0101 19.8512L11.0032 19.7494L11.0012 12.5H3.7522C3.33798 12.5 3.0022 12.1642 3.0022 11.75C3.0022 11.3703 3.28435 11.0565 3.65043 11.0068L3.7522 11H11.0012L11 3.75015C10.9999 3.33594 11.3356 3 11.7498 3Z">
                </path>
            </svg>
        </button>
        <input type="file" id="file-input" multiple>

        <div class="input-group" id="chat-form">
            <div class="attachment-previews"></div>
            <div class="message-input-container">
            <input type="text" id="message-input" placeholder="Message TotoB12" autocomplete="off">
            <button type="submit" class="send-button" title="Send message">
                <svg viewBox="0 0 24 24" fill="currentColor" xmlns="http://www.w3.org/2000/svg" class="size-6">
                    <path
                        d="M4.20889 10.7327C3.9232 11.0326 3.93475 11.5074 4.23467 11.7931C4.5346 12.0788 5.00933 12.0672 5.29502 11.7673L11.2495 5.516V20.25C11.2495 20.6642 11.5853 21 11.9995 21C12.4137 21 12.7495 20.6642 12.7495 20.25V5.51565L18.7043 11.7673C18.99 12.0672 19.4648 12.0788 19.7647 11.7931C20.0646 11.5074 20.0762 11.0326 19.7905 10.7327L12.7238 3.31379C12.5627 3.14474 12.3573 3.04477 12.1438 3.01386C12.0971 3.00477 12.0489 3 11.9995 3C11.9498 3 11.9012 3.00483 11.8543 3.01406C11.6412 3.04518 11.4363 3.14509 11.2756 3.31379L4.20889 10.7327Z">
                    </path>
                </svg>
            </button>
            </div>
        </div>
    </div>


    <div id="drop-area" class="drop-area">
        <div class="drop-area-content">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
                <polyline points="17 8 12 3 7 8" />
                <line x1="12" y1="3" x2="12" y2="15" />
            </svg>
            <span>Drop files to attach</span>
        </div>
    </div>

    <script type="module" src="script.js"></script>
</body>

</html>
```

public\script.js
```javascript
import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from "https://esm.run/@google/generative-ai";
import { marked } from "https://esm.run/marked";

const API_KEY_STORAGE_KEY = 'gemini-api-key';
let chat;
let attachedFiles = [];
let dragCounter = 0;

// DOM Elements
const apiKeyModal = document.getElementById('api-key-modal');
const apiKeyInput = document.getElementById('api-key-input');
const saveApiKeyBtn = document.getElementById('save-api-key');
const clearKeyBtn = document.getElementById('clear-key');
const newChatBtn = document.getElementById('new-chat');
const chatForm = document.getElementById('chat-form');
const messageInput = document.getElementById('message-input');
const chatHistory = document.getElementById('chat-history');
const fileInput = document.getElementById('file-input');
const dropArea = document.getElementById('drop-area');
const uploadButton = document.getElementById('upload-button');
const attachmentPreviewsContainer = document.querySelector('.attachment-previews');

// Initialize Gemini Chat
async function initializeChat() {
    const apiKey = localStorage.getItem(API_KEY_STORAGE_KEY);
    if (!apiKey) return;

    const genAI = new GoogleGenerativeAI(apiKey);
    const safetySettings = [
        {
            category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
            threshold: HarmBlockThreshold.BLOCK_NONE,
        },
        {
            category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
            threshold: HarmBlockThreshold.BLOCK_NONE,
        },
        {
            category: HarmCategory.HARM_CATEGORY_HARASSMENT,
            threshold: HarmBlockThreshold.BLOCK_NONE,
        },
        {
            category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
            threshold: HarmBlockThreshold.BLOCK_NONE,
        }
    ];
    const model = genAI.getGenerativeModel({
        model: "gemini-1.5-flash",
        generationConfig: {
            temperature: 0.2,
        },
        safetySettings: safetySettings,
    });

    chat = model.startChat();
}

// Event Listeners
saveApiKeyBtn.addEventListener('click', () => {
    const apiKey = apiKeyInput.value.trim();
    if (apiKey) {
        localStorage.setItem(API_KEY_STORAGE_KEY, apiKey);
        apiKeyModal.style.display = 'none';
        initializeChat();
    }
});

clearKeyBtn.addEventListener('click', () => {
    localStorage.removeItem(API_KEY_STORAGE_KEY);
    chat = null;
    chatHistory.innerHTML = '';
    apiKeyModal.style.display = 'flex';
});

newChatBtn.addEventListener('click', () => {
    chat = null;
    chatHistory.innerHTML = '';
    initializeChat();
});

// Handle file upload button click
uploadButton.addEventListener('click', (e) => {
    e.preventDefault();
    fileInput.click();
});

// Handle file selection
fileInput.addEventListener('change', (e) => {
    e.preventDefault();
    handleFiles(e.target.files);
});

// Handle message submission
messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        handleSubmit();
    }
});

chatForm.addEventListener('submit', (e) => {
    e.preventDefault();
    handleSubmit();
});

async function handleSubmit() {
    if (!localStorage.getItem(API_KEY_STORAGE_KEY)) {
        apiKeyModal.style.display = 'flex';
        return;
    }

    if (!chat) await initializeChat();

    const message = messageInput.value.trim();
    if (!message && attachedFiles.length === 0) return;

    const currentAttachedFiles = attachedFiles.slice(); // Copy the array

    try {
        // Add user message to chat with attachments
        addMessageToChat('user', message, currentAttachedFiles);
        messageInput.value = '';

        // Clear attachment previews from toolbar
        attachmentPreviewsContainer.innerHTML = '';

        // Process attached files
        const fileParts = await processAttachedFiles(currentAttachedFiles);

        // Prepare message parts
        const messageParts = [];
        if (message) messageParts.push({ text: message });
        messageParts.push(...fileParts);

        // Add assistant message placeholder
        const assistantMessageEl = addMessageToChat('assistant', '');

        // Send message and handle stream
        const result = await chat.sendMessageStream(messageParts);
        let fullResponse = '';

        for await (const chunk of result.stream) {
            const chunkText = chunk.text();
            fullResponse += chunkText;
            assistantMessageEl.innerHTML = marked.parse(fullResponse);
            scrollToBottom();
        }
    } catch (error) {
        console.error(error);
        addMessageToChat('error', 'An error occurred. Please try again.');
    } finally {
        attachedFiles = [];
    }
}

function handleFiles(files) {
    for (const file of files) {
        if (file.type.startsWith('image/') || file.type.startsWith('text/')) {
            attachedFiles.push(file);
            displayAttachmentPreview(file);
        }
    }
}

function displayAttachmentPreview(file) {
    const previewContainer = document.createElement('div');
    previewContainer.className = 'attachment-preview';

    const removeBtn = document.createElement('button');
    removeBtn.className = 'remove-attachment';
    removeBtn.textContent = 'Ã—';
    removeBtn.onclick = () => {
        attachedFiles = attachedFiles.filter(f => f !== file);
        previewContainer.remove();
    };

    if (file.type.startsWith('image/')) {
        const img = document.createElement('img');
        img.src = URL.createObjectURL(file);
        previewContainer.appendChild(img);
    } else {
        const fileInfo = document.createElement('div');
        fileInfo.textContent = file.name;
        previewContainer.appendChild(fileInfo);
    }

    previewContainer.appendChild(removeBtn);
    attachmentPreviewsContainer.appendChild(previewContainer);
}

async function processAttachedFiles(files) {
    const fileParts = [];
    for (let file of files) {
        const fileUri = await uploadFile(file);
        fileParts.push({
            file_data: {
                mime_type: file.type,
                file_uri: fileUri
            }
        });
    }
    return fileParts;
}

async function uploadFile(file) {
    const apiKey = localStorage.getItem(API_KEY_STORAGE_KEY);
    const uploadUrl = `https://generativelanguage.googleapis.com/upload/v1beta/files?key=${apiKey}`;

    // Start resumable upload
    const startUploadResponse = await fetch(uploadUrl, {
        method: 'POST',
        headers: {
            'X-Goog-Upload-Protocol': 'resumable',
            'X-Goog-Upload-Command': 'start',
            'X-Goog-Upload-Header-Content-Length': file.size,
            'X-Goog-Upload-Header-Content-Type': file.type,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            file: { display_name: file.name }
        })
    });

    if (!startUploadResponse.ok) {
        throw new Error('Failed to initiate file upload.');
    }

    const uploadUrlFromHeader = startUploadResponse.headers.get('X-Goog-Upload-URL');

    // Upload the file data
    const uploadResponse = await fetch(uploadUrlFromHeader, {
        method: 'POST',
        headers: {
            'Content-Length': file.size,
            'X-Goog-Upload-Offset': '0',
            'X-Goog-Upload-Command': 'upload, finalize'
        },
        body: file
    });

    if (!uploadResponse.ok) {
        throw new Error('Failed to upload file data.');
    }

    const fileInfo = await uploadResponse.json();
    const fileUri = fileInfo.file.uri;
    const fileName = fileInfo.file.name;
    let fileState = fileInfo.file.state;

    // Ensure the file state is ACTIVE
    while (fileState === 'PROCESSING') {
        console.log(`Processing file ${file.name}, please wait...`);
        await new Promise(resolve => setTimeout(resolve, 3000)); // Wait 3 seconds

        // Fetch the file info again
        const fileStatusResponse = await fetch(`https://generativelanguage.googleapis.com/v1beta/files/${fileName}?key=${apiKey}`);

        if (!fileStatusResponse.ok) {
            throw new Error('Failed to fetch file status.');
        }

        const fileStatusInfo = await fileStatusResponse.json();
        fileState = fileStatusInfo.file.state;
    }

    if (fileState !== 'ACTIVE') {
        throw new Error(`File ${file.name} is not active.`);
    }

    // Return the file URI to be used in the message parts
    return fileUri;
}

function addMessageToChat(role, content, attachments = []) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${role}-message`;

    if (attachments.length > 0) {
        const attachmentsDiv = document.createElement('div');
        attachmentsDiv.className = 'message-attachments';

        attachments.forEach(file => {
            const previewContainer = document.createElement('div');
            previewContainer.className = 'attachment-preview';

            if (file.type.startsWith('image/')) {
                const img = document.createElement('img');
                img.src = URL.createObjectURL(file);
                previewContainer.appendChild(img);
            } else {
                const fileInfo = document.createElement('div');
                fileInfo.textContent = file.name;
                previewContainer.appendChild(fileInfo);
            }

            attachmentsDiv.appendChild(previewContainer);
        });

        // messageDiv.appendChild(attachmentsDiv);
        chatHistory.appendChild(attachmentsDiv);
    }

    const contentDiv = document.createElement('div');
    contentDiv.className = 'message-content';
    contentDiv.innerHTML = role === 'error' ? content : marked.parse(content);

    messageDiv.appendChild(contentDiv);
    chatHistory.appendChild(messageDiv);
    scrollToBottom();

    return contentDiv;
}

function scrollToBottom() {
    chatHistory.scrollTop = chatHistory.scrollHeight;
}

if (localStorage.getItem(API_KEY_STORAGE_KEY)) {
    initializeChat();
}

['dragenter', 'dragover'].forEach(eventName => {
    document.addEventListener(eventName, (e) => {
        e.preventDefault();
        e.stopPropagation();
        dragCounter++;
        dropArea.style.display = 'flex';
    });
});

['dragleave', 'drop'].forEach(eventName => {
    document.addEventListener(eventName, (e) => {
        e.preventDefault();
        e.stopPropagation();
        dragCounter--;

        if (dragCounter === 0) {
            dropArea.style.display = 'none';
        }
    });
});

dropArea.addEventListener('drop', (e) => {
    e.preventDefault();
    e.stopPropagation();
    handleFiles(e.dataTransfer.files);
    dropArea.style.display = 'none';
    dragCounter = 0;
});


```

public\style.css
```css
:root {
    --white: #ffffff;
    --bg-primary: #101524;
    --bg-secondary: #161c2e;
    --bg-tertiary: #0e131f;
    --text-primary: #f2ddcc;
    --text-secondary: #828bac;
    --send-color: #455172;
    --send-hover: #505b7b;
    --accent-hover: #101420;
    --user-message: #1d2439;
    --border-color: #404040;
    --error-color: #ef4444;
    --success-color: #10b981;
    --transition-speed: 0.2s;
}

body {
    font-family: 'Segoe UI', sans-serif;
    font-size: 1.05rem;
    font-weight: 500;
    background-color: var(--bg-primary);
    color: var(--text-primary);
    height: 100vh;
    margin: 0;
    display: flex;
    flex-direction: column;
}

html {
    overflow: scroll;
}

::-webkit-scrollbar {
    width: 0px;
    background: transparent;
}

.modal {
    display: none;
    position: fixed;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.8);
    justify-content: center;
    align-items: center;
    z-index: 1000;
    backdrop-filter: blur(8px);
}

.modal-content {
    background-color: var(--bg-secondary);
    padding: 2rem;
    border-radius: 12px;
    max-width: 400px;
    width: 90%;
    border: 1px solid var(--border-color);
}

.modal-content h2 {
    margin-bottom: 0.5rem;
    font-size: 1.5rem;
}

.modal-content p {
    color: var(--text-secondary);
    margin-bottom: 1.5rem;
}

.input-wrapper {
    position: relative;
    margin: 1.5rem 0;
}

.input-wrapper input {
    /* width: 100%; */
    padding: 1rem;
    background-color: var(--bg-tertiary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    color: var(--text-primary);
    font-size: 1rem;
    transition: var(--transition-speed);
}

.input-wrapper label {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-secondary);
    transition: var(--transition-speed);
    pointer-events: none;
}

.input-wrapper input:focus+label,
.input-wrapper input:not(:placeholder-shown)+label {
    top: 0;
    transform: translateY(-50%) scale(0.8);
    background-color: var(--bg-tertiary);
    padding: 0 0.5rem;
}

.header {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    background-color: transparent;
    display: flex;
    justify-content: flex-end;
    align-items: center;
    padding: 1rem;
    z-index: 100;
}

.header h1 {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
}

.header .icon-button {
    color: var(--text-secondary);
}

.header .icon-button:hover {
    color: var(--text-primary);
}

.chat-container {
    flex-grow: 1;
    padding: 0 1rem;
    overflow-y: auto;
    width: 800px;
    align-self: center;
    display: flex;
    flex-direction: column;
}

#chat-history {
    flex-grow: 1;
    overflow-y: auto;
    padding: 1rem;
    scroll-behavior: smooth;
    padding: 10rem 0;
}

.message {
    width: fit-content;
    margin-bottom: 1rem;
    animation: fadeIn 0.3s ease-out;
    border-radius: 1rem;
}

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.user-message {
    background-color: var(--user-message);
    color: var(--text-primary);
    margin-left: auto;
    padding: 1px 1rem;
}

.assistant-message {
    background-color: transparent;
    color: var(--text-primary);
    margin-right: auto;
    padding: 1px 1rem;
}

.message-attachments {
    display: flex;
    flex-wrap: wrap;
    flex-direction: row-reverse;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
}

.message-attachments .attachment-preview {
    position: relative;
    max-height: 150px;
    border: 1px solid var(--border-color);
    border-radius: 0.7rem;
    background-color: var(--bg-secondary);
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
}

.message-attachments .attachment-preview img {
    max-width: 100%;
    max-height: 100%;
}

.message-attachments .attachment-preview div {
    color: var(--text-secondary);
    text-align: center;
    padding: 0.5rem;
}

.message-attachments .remove-attachment {
    display: none;
}

.error-message {
    background-color: rgba(239, 68, 68, 0.1);
    color: var(--error-color);
    padding: 10px;
}

.message-content {
    flex-grow: 1;
    margin: 0 0.4rem;
    color: var(--text-primary);
}

.message-content code {
    background-color: var(--bg-tertiary);
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    font-family: monospace;
}

.bottom-container {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: var(--bg-secondary);
    border-top: 1px solid var(--border-color);
    padding: 0.5rem 1rem;
    display: flex;
    flex-direction: column;
}

.attachment-previews {
    display: flex;
    overflow-x: auto;
    gap: 0.5rem;
}

.input-group {
    display: flex;
    width: 100%;
    flex-direction: column;
    background-color: var(--bg-tertiary);
    border-radius: 1.2rem;
    padding: 0 0.5rem;
}

#message-input::placeholder {
    color: var(--text-secondary);
}

#message-input:focus {
    outline: none;
}

.message-input-container {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

#file-input {
    display: none;
}

button {
    background: none;
    border: none;
    color: var(--text-primary);
    cursor: pointer;
    transition: var(--transition-speed);
}

.icon-button {
    padding: 0.5rem;
    border-radius: 50%;
    color: var(--text-primary);
}

.icon-button:hover {
    background-color: var(--bg-tertiary);
    color: var(--text-primary);
}

.attach-button {
    padding: 0.5rem;
    color: var(--text-primary);
    cursor: pointer;
}

.attach-button:hover {
    color: var(--text-primary);
}

.attachment-preview {
    margin-top: 0.5rem;
    flex: 0 0 auto;
    height: 150px;
    position: relative;
    border: 1px solid var(--border-color);
    border-radius: 0.7rem;
    background-color: var(--bg-secondary);
    display: flex;
    margin-bottom: 0.2rem;
    align-items: center;
    justify-content: center;
}

.attachment-preview img {
    max-width: 100%;
    /* min-width: 150px; */
    max-height: 100%;
    border-radius: 0.7rem;
}

.attachment-preview div {
    max-width: 100%;
    max-height: 100%;
    word-wrap: break-word;
    font-size: 0.75rem;
    color: var(--text-secondary);
    overflow: hidden;
    text-overflow: ellipsis;
    text-align: center;
}

.remove-attachment {
    position: absolute;
    top: 2px;
    right: 2px;
    background-color: var(--bg-tertiary);
    border: 1px solid var(--border-color);
    color: var(--text-secondary);
    width: 18px;
    height: 18px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.75rem;
    padding: 0;
    cursor: pointer;
}

.remove-attachment:hover {
    color: var(--error-color);
}

.drop-area {
    display: none;
    position: fixed;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(8px);
    z-index: 1000;
}

.drop-area-content {
    position: absolute;
    inset: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    color: var(--text-primary);
    border: 3px dashed var(--accent-color);
    margin: 2rem;
    border-radius: 16px;
}

@media (max-width: 768px) {
    .header {
        padding: 0.5rem;
    }

    .bottom-container {
        padding: 0.5rem;
    }
}

.toolbar .icon-button {
    width: 2.7rem;
    height: 2.7rem;
    color: var(--text-primary);
    border: none;
    border-radius: 0.7rem;
    transition: var(--transition-speed);
}

.toolbar .icon-button:hover {
    background-color: var(--accent-hover);
}

.toolbar .send-button {
    width: 2rem;
    height: 2rem;
    margin: 0.5rem;
    background-color: var(--send-color);
    border-radius: 8px;
    color: var(--text-primary);
}

.toolbar .send-button:hover {
    background-color: var(--send-hover);
}

.toolbar {
    position: absolute;
    bottom: 30px;
    border-radius: 28px;
    width: 700px;
    align-self: center;
    background-color: var(--bg-secondary);
    padding: 0.5rem;
    display: flex;
    align-items: flex-end;
    justify-content: space-between;
    box-shadow: rgba(255, 255, 255, 0.12) 0px 0px 0px 1px inset;
}

.toolbar #message-input {
    font-family: 'Segoe UI', sans-serif;
    flex-grow: 1;
    background: none;
    border: none;
    color: var(--white);
    font-size: 1rem;
    margin-left: 0.5rem;
    padding: 0.5rem;
}

.toolbar #message-input::placeholder {
    color: var(--text-secondary);
}

#file-input {
    display: none;
}
```

This all works well, but I want to add a new feature. When the user clicks on an attachment preview, that item should open itself in fullscreen. This should behave the same for items in the toolbar, or items in the chat. If there are multiple items in an attachments element, there should be left and right buttons on the side to navigate between them. I want you to fully develop and implement this.